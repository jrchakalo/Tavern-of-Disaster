// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tables   Table[]  @relation("UserTables")
  players  Player[]
  passwordResetTokens   PasswordResetToken[]
}

model Table {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  description String?  
  status      Status   @default(OPEN)
  createdAt DateTime @default(now())
  ownerId   Int
  owner     User     @relation("UserTables", fields: [ownerId], references: [id])
  players   Player[]
}

model Player {
  id      Int    @id @default(autoincrement())
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
  tableId Int
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  role    Role   @default(PLAYER)
  characterSheet CharacterSheet[]
}

model CharacterSheet {
  id          Int      @id @default(autoincrement())
  playerId    Int
  player      Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  name        String   @default("")
  class       String   @default("")
  level       Int      @default(1)
  exp         Int      @default(0)
  species     String   @default("")
  background  String   @default("")
  alignment   String   @default("")
  str         Int      @default(0)
  dex         Int      @default(0)
  con         Int      @default(0)
  inte        Int      @default(0)
  wis         Int      @default(0)
  char        Int      @default(0)
  cd          Int      @default(0)
  walk        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum Role {
  DM
  PLAYER
}

enum Status {
  OPEN
  CLOSED
}
